#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

# Add .bash_prompt to the list of sources in .bash_profile or .bashrc

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	git rev-parse --is-inside-work-tree &>/dev/null || return;

	# Check for what branch we’re on.
	# Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
	# tracking remote branch or tag. Otherwise, get the
	# short SHA for the latest commit, or give up.
	branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git describe --all --exact-match HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')";

	# Early exit for Chromium & Blink repo, as the dirty check takes too long.
	# Thanks, @paulirish!
	# https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
	repoUrl="$(git config --get remote.origin.url)";
	if grep -q 'chromium/src.git' <<< "${repoUrl}"; then
		s+='*';
	else
		# Check for uncommitted changes in the index.
		if ! $(git diff --quiet --ignore-submodules --cached); then
			s+='+';
		fi;
		# Check for unstaged changes.
		if ! $(git diff-files --quiet --ignore-submodules --); then
			s+='!';
		fi;
		# Check for untracked files.
		if [ -n "$(git ls-files --others --exclude-standard)" ]; then
			s+='?';
		fi;
		# Check for stashed files.
		if $(git rev-parse --verify refs/stash &>/dev/null); then
			s+='$';
		fi;
	fi;

	[ -n "${s}" ] && s=" [${s}]";

	echo -e "${1}${branchName}${2}${s}";
}


bold='';
reset="\e[0m";
DF="\e[1;39m";
T1="\e[1;30m";
T2="\e[1;31m";
T3="\e[1;32m";
T4="\e[1;33m";
T5="\e[1;34m";
T6="\e[1;35m";
T7="\e[1;36m";
T8="\e[1;37m";
B1="\e[1;90m";
B2="\e[1;91m";
B3="\e[1;92m";
B4="\e[1;93m";
B5="\e[1;94m";
B6="\e[1;95m";
B7="\e[1;96m";
B8="\e[1;97m";

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${B8}";
else
	userStyle="${B3}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${yellow}";
fi;

# Format:
# <HOST> in <WORKING_DIR> on <GIT_BRANCH> [<GIT STATUS>]
# $ <TEXT ENTRY>

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name
PS1+="\[${bold}\]\n"; # newline
PS1+="\[${B8}\][\$(date +"%T")] " # time
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${B3}\]@";
PS1+="\[${B3}\]\h"; # host
PS1+="\[${B8}\] in ";
PS1+="\[${B5}\]\w"; # working directory full path
PS1+="\$(prompt_git \"\[${B8}\] on \[${DF}\]\" \"\[${T7}\]\")"; # Git repository details
PS1+="\n";
PS1+="\[${B8}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;

PS2="\[${B4}\]→ \[${reset}\]";
export PS2;
